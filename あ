PowerShellを使用して指定された動作を実行するスクリプトの例です。
ただし、Webブラウザが開発者ツールで予め表示されている必要があります。
また、このスクリプトはGoogle Chromeを前提としています。
他のブラウザや環境に応じて修正する必要があります。


# キーの送信をシミュレートするための.NETアセンブリをロード
Add-Type -AssemblyName System.Windows.Forms

# 開発者ツールを開くためのキーコンビネーションを送信
[System.Windows.Forms.SendKeys]::SendWait("^(+{J})")
Start-Sleep -Milliseconds 500  # 500ミリ秒待機

# 開発者ツールの入力部分をクリック（Google Chromeの場合）
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")
Start-Sleep -Milliseconds 100  # 100ミリ秒待機
[System.Windows.Forms.SendKeys]::SendWait("{TAB}")
Start-Sleep -Milliseconds 100  # 100ミリ秒待機

# JavaScriptコードを入力して実行
$script1 = "document.querySelector('select[name=""a""]').value = ""hoge"";"
[System.Windows.Forms.SendKeys]::SendWait($script1)
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
Start-Sleep -Milliseconds 100  # 100ミリ秒待機

# JavaScriptコードを入力して実行
$script2 = "document.querySelector('input[name=""b""][type=""submit""]').click();"
[System.Windows.Forms.SendKeys]::SendWait($script2)
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

このスクリプトを実行すると、PowerShellウィンドウがアクティブである必要があります。
また、スクリプト実行後にすぐにブラウザが反応しない場合は、適切な待機時間を追加するか、
コードを調整してください。

ブラウザがJavaScriptを処理する時間を考慮して、適切な待機時間を設定します。
以下は、待機時間を追加する方法の例です。


# JavaScriptコードを入力して実行
$script1 = "document.querySelector('select[name=""a""]').value = ""hoge"";"
[System.Windows.Forms.SendKeys]::SendWait($script1)
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

# ブラウザがJavaScriptを処理する時間を考慮して待機
Start-Sleep -Milliseconds 1000  # 1000ミリ秒待機（1秒）

# JavaScriptコードを入力して実行
$script2 = "document.querySelector('input[name=""b""][type=""submit""]').click();"
[System.Windows.Forms.SendKeys]::SendWait($script2)
[System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

# ブラウザがJavaScriptを処理する時間を考慮して待機
Start-Sleep -Milliseconds 2000  # 2000ミリ秒待機（2秒）




このようにして、各JavaScriptコードの後に適切な待機時間を追加することで、
ブラウザの反応が保証されるようになります。






























